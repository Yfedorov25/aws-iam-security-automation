
AWSTemplateFormatVersion: '2010-09-09'
Description: Custom Lambdas for IAM Security

Resources:

  IAMActivityMonitorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: IAMActivityMonitorTopic

######################## IAM User Activity Analysis and Remove Unused Permissions #######################

  IAMUserActivityCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: IAMUserActivityCheckLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:DeleteUserPolicy
                  - iam:DetachUserPolicy
                  - iam:ListGroupPolicies
                  - iam:ListAttachedGroupPolicies
                  - iam:ListGroupsForUser
                  - iam:GetPolicyVersion
                  - iam:GetPolicy
                  - iam:ListUserPolicies
                  - iam:ListAttachedUserPolicies
                  - iam:GetUserPolicy
                  - cloudtrail:LookupEvents
                  - sns:Publish
                Resource: '*'

  IAMUserActivityCheckLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt IAMUserActivityCheckLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/IAMUserActivityCheck/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMActivityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)


#################### Access Key Management (Delete unused Access Keys and Replace with new ones) ###########################

  AccessKeyManagementLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessKeyManagementLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:ListAccessKeys
                  - iam:GetAccessKeyLastUsed
                  - iam:UpdateAccessKey
                  - iam:DeleteAccessKey
                  - iam:CreateAccessKey
                  - sns:Publish
                Resource: '*'

  AccessKeyManagementLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt AccessKeyManagementLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/AccessKeyManagement/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMActivityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)


######################## Access Key Rotation #######################

  AccessKeyRotationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessKeyRotationLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:CreateAccessKey
                  - iam:ListAccessKeys
                  - iam:DeleteAccessKey
                  - iam:UpdateAccessKey
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - sns:Publish
                Resource: '*'

  AccessKeyRotationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt AccessKeyRotationLambdaExecutionRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/AccessKeyRotation/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMActivityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)


######################## Empty IAM Group Deletion #######################

  EmptyGroupDeletionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EmptyGroupDeletionLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListGroups
                  - iam:GetGroup
                  - iam:DeleteGroup
                  - iam:DetachGroupPolicy
                  - iam:ListAttachedGroupPolicies
                  - sns:Publish
                Resource: '*'

  EmptyGroupDeletionLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt EmptyGroupDeletionLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/EmptyGroupDeletion/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMActivityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)


##################### IAM User Console Access Management #####################

  IAMUserConsoleAccessCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: IAMUserConsoleAccessCheckLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:CreateSecret
                  - iam:GetUser
                  - iam:DeleteLoginProfile
                  - iam:UpdateLoginProfile
                  - sns:Publish
                Resource: '*'

  IAMUserConsoleAccessCheckLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt IAMUserConsoleAccessCheckLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/IAMUserConsoleAccessCheck/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMActivityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)